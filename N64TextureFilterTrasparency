Shader "Custom/N64TextureFilterWithAlpha" {
    Properties {
        _MainTex ("Texture", 2D) = "white" {}
    }
    SubShader {
        Tags { "RenderType"="Transparent" "Queue"="Transparent" }
        Blend SrcAlpha OneMinusSrcAlpha 
        Pass {
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag
            #include "UnityCG.cginc"

            sampler2D _MainTex; 

            struct appdata {
                float4 vertex : POSITION;
                float2 uv : TEXCOORD0;
            };

            struct v2f {
                float2 uv : TEXCOORD0;
                float4 pos : SV_POSITION;
            };

            v2f vert (appdata v) {
                v2f o;
                o.pos = UnityObjectToClipPos(v.vertex);
                o.uv = v.uv; 
                return o;
            }

            fixed4 frag (v2f i) : SV_Target {
                float texelSize = 1.0 / 64.0;
                float2 uv = i.uv;

                fixed4 center = tex2D(_MainTex, uv);
                fixed4 neighborX = tex2D(_MainTex, uv + float2(texelSize, 0));
                fixed4 neighborY = tex2D(_MainTex, uv + float2(0, texelSize));

                fixed4 result = (center + neighborX + neighborY) / 3.0;

                return result;
            }
            ENDCG
        }
    }
}
